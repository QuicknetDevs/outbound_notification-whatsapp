export declare namespace RTDTypes {
    type QueueDetails = {
        orgId: string;
        queueId: string;
        queueName: string;
        channelType: string;
        queuedContactsCount: number;
        oldestContactParkedTime: number;
        totalQueuedContacts: number;
        totalContactsHandled: number;
        totalContactsAbandoned: number;
        totalQueueDuration: number;
        totalRingingDuration: number;
        totalContactWithinSla: number;
        maxQueueDuration: number;
        totalShortCalls: number;
        totalSuddenDisconnects: number;
        totalContactsDequeued: number;
        totalShortCallsWithinSla: number;
        totalSuddenDisconnectsWithinSla: number;
        totalContactsDequeuedWithinSla: number;
        totalContactsHandledWithinSla: number;
        totalContactsAbandonedWithinSla: number;
    };
    type AgentDetails = {
        agentId: string;
        agentName: string;
        agentEmail?: string;
        orgId?: string;
        agentState: string;
        agentStateDuration: string;
        phoneNumber: string;
        channelsName?: string;
        contactStatus?: string;
        contactStatusCode?: string;
        contactStatusTime?: string;
        contactQueueName?: string;
        totalContactDuration?: string;
        agentInteractionTime?: string;
        loginTime?: string;
        siteName?: string;
        teamName?: string;
        teamId?: string;
        interactionId?: string;
        contactEventName?: string;
        isMonitored?: string;
        isBarged?: string;
        monitorUserId?: string;
        monitorFullName?: string;
        contactPhoneNumber?: string;
        participants?: string;
        activeParticipantsName?: string;
        consultedParticipantName?: string;
        recording?: string;
        actions?: ActionCellDetails;
        agentNameDetails?: AgentNameDetails;
        destinationAgentId?: string | null;
        destinationAgentName?: string | null;
        changedBy?: string | null;
        changedById?: string | null;
        changedByName?: string | null;
        reason?: string | null;
        skillProfile?: string | null;
        skillProfileId?: string | null;
        skillProfileLevel?: string | null;
        participatingAgentList?: ParticipatingAgent[];
    };
    type ActionCellDetails = {
        agentName: string;
        agentEmail?: string;
        agentId: string;
        monitoredBy?: string;
        isBarged?: boolean;
        supervisorId: string;
        isSupervisorMonitoring?: boolean;
        isReviewAndMonitorEnabled?: boolean;
        isConsultCall?: boolean;
        isWebExSendingMessage?: boolean;
        isWebExSendingMessageError?: boolean;
        agentStateChanging?: boolean;
        agentStateChangeError?: boolean;
        signoutPending?: boolean;
        signoutError?: boolean;
        isWrapUp?: boolean;
        isWrapUpAssistance?: boolean;
        isMainCallInPostCall?: boolean;
        contactStatus?: string;
        isPostCallConsult?: boolean;
    };
    type AgentNameDetails = {
        agentId: string;
        agentName: string;
        agentEmail?: string;
        agentState?: string;
    };
    type ParticipantDetails = {
        activeParticipantsName: string;
        consultedParticipantName: string;
        participants?: string;
    };
    type QueueStats = RTD<{
        orgId: string;
        queueId: string;
        queueName: string;
        channelType: string;
        queuedContactsCount: number;
        oldestContactParkedTime: number;
        totalQueuedContacts: number;
        totalContactsHandled: number;
        totalContactsAbandoned: number;
        totalQueueDuration: number;
        totalRingingDuration: number;
        totalContactWithinSla: number;
        maxQueueDuration: number;
        totalShortCalls: number;
        totalSuddenDisconnects: number;
        totalContactsDequeued: number;
        totalShortCallsWithinSla: number;
        totalSuddenDisconnectsWithinSla: number;
        totalContactsDequeuedWithinSla: number;
        totalContactsHandledWithinSla: number;
        totalContactsAbandonedWithinSla: number;
        agentAssignmentType?: string | null;
        avgQueueDuration?: number | null;
        avgHandledDuration?: number | null;
        totalConnectedDuration?: number | null;
        totalHandledDuration?: number | null;
        totalHoldDuration?: number | null;
        totalPostCallDuration?: number | null;
        totalWrapUpDuration?: number | null;
        availableCount?: number | null;
        idleCount?: number | null;
        contactsInProgress?: number | null;
        contactsRinging?: number | null;
        totalContactsRona?: number | null;
        totalContactsTransferred?: number | null;
    }>;
    type AgentGlobalStatus = RTD<{
        agentId: string;
        agentName: string;
        agentEmail: string;
        globalState: string;
        globalStateTimestamp: number;
        agentPhone: string;
        lastLoginTime: number;
        siteName: string;
        teamName: string;
        teamId: string;
        idleCodeName?: string | null;
        idleCodeId?: string | null;
        orgId?: string | null;
        changedByRole?: string | null;
        changedById?: string | null;
        changedByName?: string | null;
        reason?: string | null;
        skillsProfile?: string | null;
        skillsProfileId?: string | null;
        skillsProfileLevel?: string | null;
        associatedQueueIds?: string[] | null;
    }>;
    type AgentChannelStatus = RTD<{
        agentId: string;
        agentName: string;
        contactStatus: string;
        contactStatusTimestamp: number;
        contactIngestionTimestamp: number;
        agentInteractionTimestamp?: number | null;
        contactQueueName: string;
        teamName: string;
        siteName: string;
        channelType: string;
        interactionId?: string;
        channelId: string;
    }>;
    type RTD<T = any> = {
        key: string;
        operation: string;
        data: T;
    };
    type EventData<T extends RTD> = {
        type: string;
        orgId: string;
        datasetName: string;
        eventTime: number;
        eventMetaData?: object;
        datasetValues: T[];
    };
    type Event<T extends RTD> = {
        type: string;
        orgId: string;
        trackingId: string;
        data: EventData<T>;
    };
    type ParticipatingAgent = {
        name: string;
        id: string;
        dn: string;
        type: string;
        isPrimary: boolean;
    };
    type Skill = {
        name: string;
        type: string;
        value: string;
    };
    type GlobalVariable = {
        name: string;
        type: string;
        value: string;
    };
    type AgentContactStats = RTD<{
        orgId: string;
        interactionId: string;
        channelType: string;
        agentId: string;
        agentName: string;
        teamId: string;
        teamName: string;
        siteId: string;
        siteName: string;
        origin: string;
        destination: string;
        contactDirection: string;
        queueId: string;
        queueName: string;
        destinationAgentId: string | null;
        destinationAgentName: string | null;
        destinationAgentDNIS: string | null;
        eventName: string;
        contactIngestionTimestamp: number;
        eventTime: number;
        recording: string;
        monitorStatus: string;
        isMonitored: string;
        isBarged: string;
        monitorVisibility: string;
        monitorUserId: string;
        monitorFullName: string;
        participatingAgentList: string | null;
        contactRoutingState: string | null;
        contactRoutingStateTimestamp: number | null;
        intervalStartTime: number;
        entrypointId: string | null;
        entrypointName: string | null;
        isExpired: string;
        isConnected: string | null;
        isConference: string | null;
        requiredSkills: string | null;
        matchedSkills: string | null;
        queuedFrom: string | null;
        previousQueueId: string | null;
        previousQueueName: string | null;
        transferredByAgent: string | null;
        emailToList: string | null;
        emailCcList: string | null;
        emailSubject: string | null;
        emailHasAttachments: string | null;
        customerName: string | null;
        isTransferred: string | null;
        blindTransferCount: number | null;
        holdTimestamp: number | null;
        globalVariables: string | null;
    }>;
}
//# sourceMappingURL=rtd-types.d.ts.map