import { type InteractionsServiceTypes } from "@agentx/agentx-services";
export declare const mockInteraction: InteractionsServiceTypes.TaskDetails;
export declare const expectedInteraction: {
    customerName: string;
    mediaType: string;
    mediaChannel: string;
    isWrapUp: boolean;
    queueId: string;
    ani: string;
    displayAni: string;
    destAgentName: string | null;
    destAgentPhoneNumber: string | null;
    destAgentType: undefined;
    agentId: string | null;
    consultHold: boolean;
    consultMediaResourceId: string;
    owner: string | null;
    ownerName: string | null;
    ownerPhoneNumber: string | null;
    orgId: string;
    interactionId: string;
    reasonCode: undefined;
    destAgentId: string | null;
    mediaResourceId: string;
    isConsulted: boolean;
    isFcManaged: boolean;
    state: string;
    isTerminated: boolean;
    timeStamp: number;
    consultTimeStamp: null;
    wrapUpTimestamp: null;
    wrapUpAssistTimestamp: null;
    holdTimestamp: null;
    consultHoldTimestamp: null;
    hasJoined: boolean;
    isOffered: undefined;
    ronaTimeout: string;
    virtualTeamName: string;
    ivrPath: string;
    phoneNumber: string;
    pathId: string;
    dnis: string;
    category: string;
    additionalDetails: string;
    sourceNumber: string;
    sourcePage: string;
    appUser: string | null;
    customerNumber: string;
    isConferencing: boolean;
    isRecorded: undefined;
    isRecordingPaused: undefined;
    isPauseResumeEnabled: undefined;
    isQueued: boolean;
    recordingPauseDuration: undefined;
    contactDirection: string;
    outboundType: undefined;
    isHold: boolean;
    ctqInProgress: boolean;
    outdialTransferToQueueEnabled: undefined;
    callAssociatedData: {};
    hasCustomerLeft: undefined;
    isConvNotFound: undefined;
    updatedBy: string | null;
    parentInteractionId: undefined;
    childInteractionId: undefined;
    relationshipType: undefined;
    parent_ANI: undefined;
    parent_DNIS: undefined;
    isOwner: boolean;
    EpDnConsultDestinationAgentJoined: boolean;
    isSecondaryEpDnAgent: boolean;
    contactPhoneNumber: string;
    contactQueue: string;
    participants: undefined;
    activeParticipants: undefined;
    consultedParticipant: undefined;
    contactStatus: string;
    timeInContactStatus: undefined;
    totalContactDuration: string;
    agentInteractionTime: string;
    recording: undefined;
    monitoringStartTime: undefined;
    type: string;
    isMonitoringOnHold: undefined;
    monitoringHoldTimer: undefined;
    monitoringOwnerName: undefined;
    isCallMute: undefined;
    isBargedIn: undefined;
    bargedInTimeStamp: undefined;
    fcDesktopViewCad: undefined;
    primaryMediaParticipants: {};
    isConsultEnabledForMPC: boolean;
    isConsultInProgress: boolean;
    isConferenceInProgress: boolean;
    isWrapUpAssist: boolean;
    isSecondaryAgentCBT: boolean;
    postCallTimestamp: null;
    isInteractionInPostCall: boolean;
    isAmdDetectedInCallback: boolean;
    isCompleted: boolean;
    csat: number;
};
export declare const getExpectedAgentConfig: () => {
    agentDBId: string;
    channels: {
        voiceCount: number;
        chatCount: number;
        emailCount: number;
        socialCount: number;
        maVoiceCount: number;
        maChatCount: number;
        maEmailCount: number;
        maSocialCount: number;
    };
    agentProfileID: string;
    isendcallenabled: boolean;
    isEndConsultEnabled: boolean;
    privacyShieldVisible: string | boolean;
    agentId: string;
    callVariablesSuppressed: import("@/../../agentx-services/dist/types/agentx-services/src/services/aqm/types/aqm-service-configs.types").CallVariablesSuppressed;
    cadVariables: import("@/../../agentx-services/dist/types/agentx-services/src/services/aqm/types/aqm-service-configs.types").CadVariables[];
    allowConsultToQueue: boolean;
    deviceType: import("@agentx/agentx-services").Service.Aqm.Agent.DeviceType;
    dtmfValue: string;
    isWebRTCEnabled: boolean;
    isIMIGlobalVariablesEnabled: boolean;
    isGlobalVariablesEnabled: boolean;
    role: string;
    isBargeInEnabled: boolean;
    agentCallMonitoringState: import("@/../../agentx-mfe-react-based/dist/types/agentx-mfe-react-based").InteractionControlNS.AgentCallMonitoringState | undefined;
    microsoftAuthConfig: any;
    collaborationConfig: {
        collabToolInSync: string;
        displayUserDetails: boolean;
        displayMicrosoftUserDetails: boolean;
        displayWebexUserDetails: boolean;
        stateSynchronization: boolean;
    };
    isWebrtcEndCallEnabled: boolean;
    isWxccMultiPartyConfEnabled: boolean;
    isWxccPersistCallEnabled: boolean;
    isAllowConfTransferToEpDnEnabled: boolean;
    isInteractionBtnConfirmDialogEnabled: boolean;
    isConsultTransferInfiniteScrollEnabled: boolean;
    isSecureCADVariablesEnabled: boolean;
    webexCallingCallId: string | undefined;
    isWxccPersistConsultEnabled: boolean;
    isConferenceTransferEnabled: boolean;
};
export declare const expectedEmptyResults: {
    getEpDnMapping: () => {
        initialFetchCompleted: boolean;
        data: never[];
        errorObj: null;
    };
    getAddressBook: () => {
        initialFetchCompleted: boolean;
        data: never[];
        errorObj: null;
    };
    getInteraction: () => null;
    getIsCallMuted: () => undefined;
    getCadStatus: () => {
        isInteractionCADContainersExpanded: boolean;
        isMainContainerCADExpanded: boolean;
        isConsultContainerCADExpanded: boolean;
    };
    getWrapUpData: () => {
        wrapUpProps: {
            autoWrapup: undefined;
            autoWrapupInterval: undefined;
            lastAgentRoute: undefined;
            wrapUpReasonList: never[];
            wrapUpCodesList: undefined;
            idleCodesAccess: undefined;
            interactionId: string;
            allowCancelAutoWrapup: undefined;
        };
    };
    getAgentWrapUpCodeProps: () => {};
    getCallPersistence: () => {
        isOpen: boolean;
    };
    getIsVoiceInteraction: () => boolean;
};
export declare const expectedInteractionResults: {
    getEpDnMapping: () => {
        initialFetchCompleted: boolean;
        data: never[];
        errorObj: null;
    };
    getAddressBook: () => {
        initialFetchCompleted: boolean;
        data: never[];
        errorObj: null;
    };
    getInteraction: () => {
        customerName: string;
        mediaType: string;
        mediaChannel: string;
        isWrapUp: boolean;
        queueId: string;
        ani: string;
        displayAni: string;
        destAgentName: string | null;
        destAgentPhoneNumber: string | null;
        destAgentType: undefined;
        agentId: string | null;
        consultHold: boolean;
        consultMediaResourceId: string;
        owner: string | null;
        ownerName: string | null;
        ownerPhoneNumber: string | null;
        orgId: string;
        interactionId: string;
        reasonCode: undefined;
        destAgentId: string | null;
        mediaResourceId: string;
        isConsulted: boolean;
        isFcManaged: boolean;
        state: string;
        isTerminated: boolean;
        timeStamp: number;
        consultTimeStamp: null;
        wrapUpTimestamp: null;
        wrapUpAssistTimestamp: null;
        holdTimestamp: null;
        consultHoldTimestamp: null;
        hasJoined: boolean;
        isOffered: undefined;
        ronaTimeout: string;
        virtualTeamName: string;
        ivrPath: string;
        phoneNumber: string;
        pathId: string;
        dnis: string;
        category: string;
        additionalDetails: string;
        sourceNumber: string;
        sourcePage: string;
        appUser: string | null;
        customerNumber: string;
        isConferencing: boolean;
        isRecorded: undefined;
        isRecordingPaused: undefined;
        isPauseResumeEnabled: undefined;
        isQueued: boolean;
        recordingPauseDuration: undefined;
        contactDirection: string;
        outboundType: undefined;
        isHold: boolean;
        ctqInProgress: boolean;
        outdialTransferToQueueEnabled: undefined;
        callAssociatedData: {};
        hasCustomerLeft: undefined;
        isConvNotFound: undefined;
        updatedBy: string | null;
        parentInteractionId: undefined;
        childInteractionId: undefined;
        relationshipType: undefined;
        parent_ANI: undefined;
        parent_DNIS: undefined;
        isOwner: boolean;
        EpDnConsultDestinationAgentJoined: boolean;
        isSecondaryEpDnAgent: boolean;
        contactPhoneNumber: string;
        contactQueue: string;
        participants: undefined;
        activeParticipants: undefined;
        consultedParticipant: undefined;
        contactStatus: string;
        timeInContactStatus: undefined;
        totalContactDuration: string;
        agentInteractionTime: string;
        recording: undefined;
        monitoringStartTime: undefined;
        type: string;
        isMonitoringOnHold: undefined;
        monitoringHoldTimer: undefined;
        monitoringOwnerName: undefined;
        isCallMute: undefined;
        isBargedIn: undefined;
        bargedInTimeStamp: undefined;
        fcDesktopViewCad: undefined;
        primaryMediaParticipants: {};
        isConsultEnabledForMPC: boolean;
        isConsultInProgress: boolean;
        isConferenceInProgress: boolean;
        isWrapUpAssist: boolean;
        isSecondaryAgentCBT: boolean;
        postCallTimestamp: null;
        isInteractionInPostCall: boolean;
        isAmdDetectedInCallback: boolean;
        isCompleted: boolean;
        csat: number;
    };
    getIsCallMuted: () => undefined;
    getCadStatus: () => {
        isInteractionCADContainersExpanded: boolean;
        isMainContainerCADExpanded: boolean;
        isConsultContainerCADExpanded: boolean;
    };
    getWrapUpData: () => {
        wrapUpProps: {
            autoWrapup: undefined;
            autoWrapupInterval: undefined;
            lastAgentRoute: undefined;
            wrapUpReasonList: never[];
            wrapUpCodesList: undefined;
            idleCodesAccess: undefined;
            interactionId: string;
            allowCancelAutoWrapup: undefined;
        };
    };
    getAgentWrapUpCodeProps: () => {};
    getCallPersistence: () => {
        isOpen: boolean;
    };
    getIsVoiceInteraction: () => boolean;
};
export declare const expectedTaskResults: {
    getEpDnMapping: () => any;
    getAddressBook: () => import("@agentx/agentx-services").Service.Aqm.Agent.AddressBooksData;
    getInteraction: () => import("@/../../agentx-mfe-react-based/dist/types/agentx-mfe-react-based").InteractionControlNS.Interaction | null;
    getIsCallMuted: () => any;
    getCadStatus: () => {
        isInteractionCADContainersExpanded: boolean;
        isMainContainerCADExpanded: boolean;
        isConsultContainerCADExpanded: boolean;
    };
    getWrapUpData: () => import("@/../../agentx-services/dist/types/agentx-services/src/services/aqm/types/aqm-service-configs.types").WrapupData;
    getAgentWrapUpCodeProps: () => any;
    getCallPersistence: () => {
        isOpen: boolean;
    };
    getIsVoiceInteraction: () => boolean;
};
